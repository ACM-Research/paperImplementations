# -*- coding: utf-8 -*-
"""architecture _optimized.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J_8JI8vUg8ExtxDV8I3MR29Zz5MOEQij
"""

!pip install tensorflow==2.8.0 tensorflow-gpu==2.8.0 matplotlib==3.5.1 tensorflow-datasets==4.5.2 ipywidgets

import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, Dense, LeakyReLU, Reshape, Dropout, UpSampling2D, Flatten

ds, info = tfds.load('imagenette/320px', split='train', with_info=True)

def preprocess_image(data):
    image = tf.cast(data['image'], tf.float32) / 255.0
    image = tf.image.resize(image, (128, 128))
    image = tf.image.rgb_to_grayscale(image)
    return image

ds = ds.map(preprocess_image)
ds = ds.cache()
ds = ds.shuffle(1000)
ds = ds.batch(32)
ds = ds.prefetch(tf.data.AUTOTUNE)


def generator_arch():
    model = Sequential()
    model.add(Dense(16*16*128, input_dim=100))
    model.add(LeakyReLU(0.2))
    model.add(Reshape((16, 16, 128)))

    model.add(UpSampling2D())
    model.add(Conv2D(128, 5, padding="same"))
    model.add(LeakyReLU(0.2))

    model.add(UpSampling2D())
    model.add(Conv2D(64, 5, padding="same"))
    model.add(LeakyReLU(0.2))

    model.add(UpSampling2D())
    model.add(Conv2D(32, 5, padding="same"))
    model.add(LeakyReLU(0.2))

    model.add(Conv2D(1, 4, padding="same", activation="sigmoid"))

    return model

def discriminator_arch():
    model = Sequential()
    model.add(Conv2D(32, 5, input_shape=(128, 128, 1)))
    model.add(LeakyReLU(0.2))
    model.add(Dropout(0.4))

    model.add(Conv2D(64, 5, strides=(2,2)))
    model.add(LeakyReLU(0.2))
    model.add(Dropout(0.4))

    model.add(Conv2D(128, 5, strides=(2,2)))
    model.add(LeakyReLU(0.2))
    model.add(Dropout(0.4))

    model.add(Conv2D(256, 5, strides=(2,2)))
    model.add(LeakyReLU(0.2))
    model.add(Dropout(0.4))

    model.add(Flatten())
    model.add(Dropout(0.4))
    model.add(Dense(1, activation='sigmoid'))

    return model

generator = generator_arch()
discriminator = discriminator_arch()


def plot_model(model):
    fig, ax = plt.subplots(figsize=(12, 8))

    colors = {'Conv2D': '#FFA07A', 'LeakyReLU': '#98FB98', 'Dropout': '#87CEFA', 'Flatten': '#DDA0DD', 'Dense': '#F0E68C'}

    layers = [(layer.__class__.__name__, layer.output_shape) for layer in model.layers]

    for i, (layer_type, output_shape) in enumerate(layers):
        color = colors.get(layer_type, '#FFFFFF')
        rect = plt.Rectangle((0.1, 1 - (i + 1) * 0.09), 0.8, 0.07, fill=True, facecolor=color, edgecolor='black')
        ax.add_patch(rect)
        plt.text(0.5, 1 - (i + 1) * 0.09 + 0.035, f"{layer_type}\n{output_shape}", ha='center', va='center')

    for i in range(len(layers) - 1):
        ax.annotate('', xy=(0.5, 1 - (i + 1) * 0.09), xytext=(0.5, 1 - (i + 2) * 0.09),
                    arrowprops=dict(arrowstyle='->'))

    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_xticks([])
    ax.set_yticks([])

    plt.title('Discriminator Architecture', fontsize=16)

    legend_elements = [plt.Rectangle((0, 0), 1, 1, facecolor=color, edgecolor='black', label=layer_type)
                       for layer_type, color in colors.items()]
    ax.legend(handles=legend_elements, loc='upper right', bbox_to_anchor=(1.3, 1))

    plt.tight_layout()
    plt.show()

plot_model(discriminator)


print("Generator Summary:")
generator.summary()

print("\nDiscriminator Summary:")
discriminator.summary()


plt.figure(figsize=(10, 10))
for images in ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().squeeze(), cmap='gray')
        plt.axis('off')
plt.show()

